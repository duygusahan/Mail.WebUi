@model Mail.EntityLayer.Concrete.Message
@{
    ViewData["Title"] = "CreateNewMessage";
    Layout = "~/Views/Shared/_MailLayout.cshtml";
}

<div class="col-span-6 card flex flex-col p-6">
    <h1 class="text-2xl font-semibold mb-4">Yeni Mesaj Oluştur</h1>

    <form id="messageForm" action="/Messages/CreateNewMessage" method="post" class="flex flex-col space-y-4" enctype="multipart/form-data">
        <!-- Recipient Field -->
        <div class="flex flex-col">
            <label for="recipient" class="text-gray-700 font-semibold">Alıcı:</label>
            <input type="email" id="recipient" name="ReceiverMail" class="p-3 border rounded" placeholder="Alıcı e-posta adresini girin" required>
        </div>

        <!-- Subject Field -->
        <div class="flex flex-col">
            <label for="subject" class="text-gray-700 font-semibold">Konu:</label>
            <input type="text" id="subject" name="Subject" class="p-3 border rounded" placeholder="Konu" required>
        </div>

        <!-- Message Content Field -->
        <div class="flex flex-col">
            <label for="messageContent" class="text-gray-700 font-semibold">Mesaj:</label>
            <textarea id="messageContent" name="Content" class="p-3 border rounded resize-none" rows="10" placeholder="Mesajınızı buraya yazın..." required></textarea>
        </div>

        <!-- File Attachment Field -->
        <div class="flex flex-col">
            <label for="attachments" class="text-gray-700 font-semibold">Dosya Eki:</label>
            <input type="file" id="attachments" name="attachments" class="p-3 border rounded" multiple>
            <div id="fileList" class="mt-2"></div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-3">
            <a href="/Messages/ListMessage" class="btn text-gray-800 bg-white hover:bg-gray-100 hover:text-gray-900 uppercase tracking-wider">
                <i class="fad fa-arrow-left mr-2"></i> Geri
            </a>
            <button type="button" id="saveDraftButton" class="btn text-gray-800 bg-white hover:bg-gray-100 hover:text-gray-900 uppercase tracking-wider">
                <i class="fad fa-save mr-2"></i> Taslaklara Kaydet
            </button>
            <button type="submit" class="btn-indigo uppercase tracking-wider">
                <i class="fad fa-paper-plane mr-2"></i> Gönder
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.ckeditor.com/4.16.0/standard/ckeditor.js"></script>
    <script>
        CKEDITOR.replace('messageContent');

        document.getElementById('attachments').addEventListener('change', function (event) {
            const fileList = document.getElementById('fileList');
            fileList.innerHTML = '';
            Array.from(event.target.files).forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'flex items-center justify-between p-2 bg-gray-200 border rounded mt-2';
                fileItem.innerHTML = `
                            <span>${file.name} - ${formatBytes(file.size)}</span>
                            <button type="button" class="text-red-500 hover:text-red-700" onclick="removeFile(${index})">Kaldır</button>
                        `;
                fileList.appendChild(fileItem);
            });
        });

        function removeFile(index) {
            const attachments = document.getElementById('attachments');
            const fileList = document.getElementById('fileList');

            // Remove the file from the file input
            const dataTransfer = new DataTransfer();
            Array.from(attachments.files).forEach((file, i) => {
                if (i !== index) {
                    dataTransfer.items.add(file);
                }
            });
            attachments.files = dataTransfer.files;

            // Update the file list display
            fileList.children[index].remove();
        }

        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }
    </script>
}
